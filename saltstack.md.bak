###Saltstack official documentation
[Table of contents](https://docs.saltstack.com/en/latest/contents.html)  
[Windows update module](https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.win_wua.html#salt.modules.win_wua.available)  
[State modules](https://docs.saltstack.com/en/latest/ref/states/all/index.html)
###Install saltstack
**Install saltstack master**  
 # yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest.el7.noarch.rpm -y  
 # yum install salt-master  
 # systemctl start salt-master  
 # systemctl enable salt-master  
 # firewall-cmd --zone=public --add-port=4505-4506/tcp --permanent  
 # firewall-cmd --reload  
 # vi /etc/salt/master
```
interface: 192.168.152.110
```
 # systemctl restart salt-master  
**Install saltstack minion on windows**  
 # .\Salt-Minion-2019.2.0-Py2-AMD64-Setup.exe /S /master=192.168.152.110 /minion-name=  
**Note**:If the system is missing the appropriate version of the Visual C++ Redistributable (vcredist) the user will be prompted to install it.  
**Install saltstack minion on centos**  
 # yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest.el7.noarch.rpm -y  
 # yum install salt-minion -y
###Using salt
**List all keys of minions**  
 # salt-key -L  
**Accept a minion**  
 # salt-key -a minion-name  
**Delete a minion**  
 # salt-key -d minion-name  
**Test minion connection**  
 # salt "minion-name" test.ping  
**List connected minions**  
 # salt-run manage.status  
 # salt-run manage.versions  
 # salt-run manage.up  
 # salt-run manage.down
**Job manage**  
 # salt "minion-name" saltutil.running  
 # salt "minion-name" saltutil.kill_job jid  
**Update windows minion**  
 # salt "minion-name" win_wua.get KB4499164 install=true  
 # salt "minion-name" win_wua.list categories=['Security Updates'] severities=['Critical'] install=True  
**Reboot windows minion**  
 # salt "minion-name" system.reboot 5 True  
**Shutdown windows minion**  
 # salt "minion-name" system.shutdown timeout=0  
**Enable/Disable windows remote desktop**  
 # salt "minion-name" cmd.run 'reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f'  
 # salt "minion-name" cmd.run 'reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 1 /f'  
**Manage windows users**  
 # salt "minion-name" user.list_users  
 # salt "minion-name" user.setpassword user password  
**Configure windows dns**  
 # salt "minion-name" win_dns_client.get_dns_config 'Local area connetion'  
 # salt "minion-name" win_dns_client.add_dns 202.96.209.5 'Local area connetion' 1
###Custom state modules
####- Install oracle jdk
 # vi /src/salt/modules/jdk/install.sls  
 # salt "minion-name" state.sls modules.jdk.install
```
{% set jdk_version = "jdk1.8.0_201" %}
jdk-install:
  file.managed:
    - name: /usr/local/src/{{ jdk_version }}-linux-x64.tar.gz
    - source: salt://modules/packages/{{ jdk_version }}-linux-x64.tar.gz
    - user: root
    - group: root
    - mode: 755
  cmd.run:
    - name: cd /usr/local/src && tar zxf {{ jdk_version }}-linux-x64.tar.gz && mv {{ jdk_version }} /usr/local/ && ln -s /usr/local/{{ jdk_version }} /usr/local/jdk
    - unless: test -d /usr/local/{{ jdk_version }} && test -L /usr/local/jdk
    - require:
      - file: jdk-install
jdk-env:
  file.append:
    - name: /etc/profile
    - text:
      - export JAVA_HOME=/usr/local/jdk
      - export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
      - export PATH=$PATH:$JAVA_HOME/bin
    - unless: test -n "$JAVA_HOME"
  cmd.run:
    - name: source /etc/profile
    - require:
      - file: jdk-env
```
####- Install tomcat
 # vi /src/salt/modules/tomcat/install.sls  
 # salt "minion-name" state.sls modules.tomcat.install
```
{% set tomcat_version = "7.0.94" %}
tomcat-install:
  file.managed:
    - name: /usr/local/src/apache-tomcat-{{ tomcat_version }}.tar.gz
    - source: salt://modules/packages/apache-tomcat-{{ tomcat_version }}.tar.gz
    - user: root
    - group: root
    - mode: 755
  cmd.run:
    - name: cd /usr/local/src && tar zxf apache-tomcat-{{ tomcat_version }}.tar.gz && mv apache-tomcat-{{ tomcat_version }} /usr/local/ && ln -s /usr/local/apache-tomcat-{{ tomcat_version }} /usr/local/tomcat
    - unless: test -d /usr/local/apache-tomcat-{{ tomcat_version }} && test -L /usr/local/tomcat
    - require:
      - file: tomcat-install
```
####- Install GCC
 # vi /src/salt/modules/pkg/make.sls  
 # salt "minion-name" state.sls modules.pkg.make
```
pkg-init:
  pkg.installed:
    - names:
      - gcc
      - gcc-c++
      - openssl-devel
```
####- Install node.js
 # vi /src/salt/modules/node/install.sls
 # salt "minion-name" state.sls modules.node.install
```
{% set node_version = "v0.12.4" %}
include:
  - modules.pkg.make
node-install:
  file.managed: 
    - name: /usr/local/src/node-{{ node_version }}.tar.gz
    - source: salt://modules/packages/node-{{ node_version }}.tar.gz
    - user: root
    - group: root
    - mode: 755
  cmd.run:
    - name: cd /usr/local/src && tar zxf node-{{ node_version }}.tar.gz && cd node-{{ node_version }} && ./configure --prefix=/usr/local/node && make && make install
    - unless: test -d /usr/local/node
    - require:
      - pkg: pkg-init
      - file: node-install
node-env:
  file.append:
    - name: /etc/profile
    - text:
      - export NODE_HOME=/usr/local/node
      - export PATH=$NODE_HOME/bin:$PATH
      - export NODE_PATH=$NODE_HOME/lib/node_modules:$PATH
    - unless: test -n "$NODE_HOME"
  cmd.run:
    - name: source /etc/profile
    - require:
      - file: node-env
install-express:
  cmd.run:
    - name: /usr/local/node/bin/npm install -g express-generator && /usr/local/node/bin/npm install -g express
    - unless: test -L /usr/local/node/bin/express
    - require:
      - cmd: node-install
      - cmd: node-env
```